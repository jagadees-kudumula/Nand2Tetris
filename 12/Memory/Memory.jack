class Memory {
    static Array ram;
    static Array freeList;

    /** Initialise the ram to 0, and freeList to heap which is at 2048 */
    /* 
        |    null    | 2048
        |    14334   | 2049
        |            | 2050 <== freeList
        |            | 2051
        |            | 2052
        |            | 2053
    */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let freeList[0] = null; //This the pointer to next free block of Memory
        let freeList[1] = 16384 - (2048 + 2); //Size of the freeList
        let freeList = freeList + 2;
        return;
    }

    /* Return the value in the given address */
    function int peek(int address) {
        return ram[address];
    }

    /* Store the given value in the address given */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /* Allocate memory with given size in the heap memory */
    function Array alloc(int size) {
        var Array temp; //temp variable is used to iterate over freeList blocks
        var Array newPointer; //This is the pointer of the allocated memory which will be returned to caller

        let temp = freeList;

        while (~(temp = 0)) {
            //If freeblock size is greater than the (required size + 2) then we can allocate it
            //Extra 2 words are required to store the next Free block address and the block size
            if (~(temp[-1] < (size + 2))) {
                //Resize the size of current free block according to the required block size
                let temp[-1] = temp[-1] - (size + 2);
                //Now we will assign the address of the new free block with the (required size + 2)
                // ex: if temp is at 2050 and size is 14334, if the required size 20 then the size of temp will
                // become 14312 and the newPointer will become temp + 14312 = 2050 + 14312 = 16362
                let newPointer = temp + temp[-1]; 
                let newPointer[0] = null; //This the pointer to next free block of Memory
                let newPointer[1] = size; //Size of the freeList
                let newPointer = newPointer + 2; //This is the pointer returned to the caller 
                return newPointer;
            }

            //This will assign temp with the address of next free block
            let temp = temp[-2]; 
        }
        return 0;
    }

    /** This function will append the dealocated memory block to the freeList */
    function void deAlloc(Array address) {
        let address[-2] = freeList;
        let freeList = address;
        return;
    }
}