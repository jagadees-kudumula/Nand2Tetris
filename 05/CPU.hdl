// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    //Selecting Aregister as address register or data register based on OP Code
    Mux16(a=instruction, b=output, sel=instruction[15], out=o);

    //Setting load bit for Aregister
    Not(in=instruction[15], out=notop);
    Or(a=notop, b=instruction[5], out=aload);
    ARegister(in=o, load=aload, out=aregister, out[0..14]=addressM);

    //Selecting data from A register or D Register
    Mux16(a=aregister, b=inM, sel=instruction[12], out=y);

    //Selecting either address or output of ALU based on opcode for the input of DRegister
    Mux16(a=aregister, b=alu, sel=instruction[15], out=output);

    //Selecting load bit for Dregister
    And(a=instruction[15], b=instruction[4], out=dload);
    DRegister(in=output, load=dload, out=x);

    //ALU
    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=alu, out=outM, zr=zr, ng=ng);

    //Write bit according to the instruction opcode
    And(a=instruction[15], b=instruction[3], out=writeM);

    //Logic for load bit to jump as per the conditions
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    
    And(a=instruction[0], b=notzr, out=a);
    And(a=a, b=notng, out=e1);

    And(a=instruction[1], b=zr, out=c);
    And(a=notng, b=c, out=e2);

    And(a=instruction[2], b=notzr, out=b);
    And(a=b, b=ng, out=e3);

    And(a=instruction[0], b=instruction[1], out=d);
    And(a=d, b=instruction[2], out=e4);

    Or(a=e1, b=e2, out=l1);

    Or(a=l1, b=e3, out=l2);

    Or(a=l2, b=e4, out=l3);

    And(a=l3, b=instruction[15], out=load);
    
    PC(in=aregister, load=load, reset=reset, inc=true, out[0..14]=pc);

}