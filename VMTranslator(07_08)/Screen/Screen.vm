function Screen.init 0
push constant 1
neg
pop static 0
push constant 0
pop static 3
push constant 0
return
function Screen.clearScreen 3
push constant 16384
pop local 0
push constant 0
pop local 1
label Screen_49
push local 1
push constant 256
lt
not
if-goto Screen_50
push constant 0
pop local 2
label Screen_51
push local 2
push constant 32
lt
not
if-goto Screen_52
push local 0
push local 1
push local 2
add
add
push constant 0
call Memory.poke 2
pop temp 0
push local 2
push constant 1
add
pop local 2
goto Screen_51
label Screen_52
push local 1
push constant 1
add
pop local 1
goto Screen_49
label Screen_50
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 6
push argument 0
push constant 16
call Math.divide 2
pop local 1
push argument 0
push constant 16
push local 1
call Math.multiply 2
sub
pop local 2
push constant 32
push argument 1
call Math.multiply 2
push local 1
add
pop local 0
push constant 16384
push local 0
add
call Memory.peek 1
pop local 3
push local 2
call Math.twoToThe 1
pop local 5
push local 3
push local 5
not
and
pop local 4
push local 4
push local 5
push static 0
and
or
pop local 4
push constant 16384
push local 0
add
push local 4
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 15
push argument 0
pop local 0
push argument 1
pop local 1
push argument 2
push argument 0
sub
call Math.abs 1
pop local 2
push argument 3
push argument 1
sub
call Math.abs 1
pop local 3
push local 2
push constant 0
eq
not
if-goto Screen_53
push argument 3
push argument 1
lt
not
if-goto Screen_54
push argument 3
pop local 1
push argument 1
pop argument 3
label Screen_54
push local 0
push constant 16
call Math.divide 2
pop local 9
push local 0
push constant 16
push local 9
call Math.multiply 2
sub
pop local 10
push constant 32
push local 1
call Math.multiply 2
push local 9
add
pop local 11
push constant 16384
push local 11
add
call Memory.peek 1
pop local 12
push local 10
call Math.twoToThe 1
pop local 13
label Screen_55
push local 1
push argument 3
gt
not
not
if-goto Screen_56
push constant 16384
push local 11
add
push local 12
push local 13
not
and
push local 13
push static 0
and
or
call Memory.poke 2
pop temp 0
push local 11
push constant 32
add
pop local 11
push local 1
push constant 1
add
pop local 1
goto Screen_55
label Screen_56
push constant 0
return
label Screen_53
push local 3
push constant 0
eq
not
if-goto Screen_57
push argument 2
push argument 0
lt
not
if-goto Screen_58
push argument 2
pop local 0
push argument 0
pop argument 2
label Screen_58
push static 3
not
not
if-goto Screen_59
push local 0
push constant 16
call Math.divide 2
pop local 9
push local 0
push constant 16
push local 9
call Math.multiply 2
sub
pop local 10
push constant 32
push local 1
call Math.multiply 2
push local 9
add
pop local 11
goto Screen_60
label Screen_59
push static 2
pop local 10
push static 1
pop local 11
label Screen_60
push constant 16384
push local 11
add
call Memory.peek 1
pop local 12
push local 2
push constant 1
add
pop local 14
push local 10
call Math.twoToThe 1
push constant 1
sub
not
pop local 13
push local 14
push constant 16
push local 10
sub
gt
not
not
if-goto Screen_61
push local 14
push local 10
add
push constant 16
lt
not
if-goto Screen_62
push local 13
push local 14
push local 10
add
call Math.twoToThe 1
add
pop local 13
label Screen_62
push constant 16384
push local 11
add
push local 12
push local 13
not
and
push local 13
push static 0
and
or
call Memory.poke 2
pop temp 0
push constant 0
return
label Screen_61
push constant 16384
push local 11
add
push local 12
push local 13
not
and
push local 13
push static 0
and
or
call Memory.poke 2
pop temp 0
push local 14
push constant 16
push local 10
sub
sub
pop local 14
push local 11
push constant 1
add
pop local 11
label Screen_63
push local 14
push constant 16
lt
not
not
if-goto Screen_64
push constant 16384
push local 11
add
push static 0
call Memory.poke 2
pop temp 0
push local 14
push constant 16
sub
pop local 14
push local 11
push constant 1
add
pop local 11
push local 14
push constant 0
eq
not
if-goto Screen_65
push constant 0
return
label Screen_65
goto Screen_63
label Screen_64
push local 14
call Math.twoToThe 1
push constant 1
sub
pop local 13
push constant 16384
push local 11
add
call Memory.peek 1
pop local 12
push constant 16384
push local 11
add
push local 12
push local 13
not
and
push local 13
push static 0
and
or
call Memory.poke 2
pop temp 0
push constant 0
return
label Screen_57
push constant 0
pop local 4
push constant 0
pop local 5
push constant 0
pop local 6
push argument 0
push argument 2
lt
pop local 7
push argument 1
push argument 3
lt
pop local 8
label Screen_66
push local 4
push local 2
gt
not
push local 5
push local 3
gt
not
and
not
if-goto Screen_67
push local 0
push local 4
push local 7
and
push local 4
push local 7
or
not
or
add
push local 1
push local 5
push local 8
and
push local 5
push local 8
or
not
or
sub
call Screen.drawPixel 2
pop temp 0
push local 6
push constant 0
lt
not
if-goto Screen_68
push local 4
push constant 1
add
pop local 4
push local 6
push local 3
add
pop local 6
goto Screen_69
label Screen_68
push local 5
push constant 1
sub
pop local 5
push local 6
push local 2
sub
pop local 6
label Screen_69
goto Screen_66
label Screen_67
push constant 0
return
function Screen.drawRectangle 3
push argument 0
push argument 2
gt
push argument 1
push argument 3
gt
or
not
if-goto Screen_70
push constant 0
return
label Screen_70
push argument 0
pop local 0
push argument 1
pop local 1
push constant 1
neg
pop static 3
push local 0
push constant 16
call Math.divide 2
pop local 2
push local 0
push constant 16
push local 2
call Math.multiply 2
sub
pop static 2
push constant 32
push local 1
call Math.multiply 2
push local 2
add
pop static 1
label Screen_71
push local 1
push argument 3
gt
not
not
if-goto Screen_72
push local 0
push local 1
push argument 2
push local 1
call Screen.drawLine 4
pop temp 0
push static 1
push constant 32
add
pop static 1
push local 1
push constant 1
add
pop local 1
goto Screen_71
label Screen_72
push constant 0
pop static 3
push constant 0
return
function Screen.drawCircle 10
push constant 1
neg
pop static 3
push argument 2
pop local 0
label Screen_73
push local 0
push constant 0
lt
not
not
if-goto Screen_74
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 0
push local 1
sub
pop local 2
push argument 1
push local 0
add
pop local 3
push argument 0
push local 1
add
pop local 4
push argument 1
push local 0
add
pop local 5
push local 2
push constant 16
call Math.divide 2
pop local 8
push local 2
push constant 16
push local 8
call Math.multiply 2
sub
pop static 2
push constant 32
push local 3
call Math.multiply 2
push local 8
add
pop static 1
push local 2
push local 3
push local 4
push local 5
call Screen.drawLine 4
pop temp 0
push argument 1
push local 0
sub
pop local 3
push argument 1
push local 0
sub
pop local 5
push constant 32
push local 3
call Math.multiply 2
push local 8
add
pop local 9
push local 9
pop static 1
push local 2
push local 3
push local 4
push local 5
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
sub
pop local 0
goto Screen_73
label Screen_74
push constant 0
pop static 3
push constant 0
return
