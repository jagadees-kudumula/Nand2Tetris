// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */

    field Array str; //this 0
    field int length; //this 1
    field int maxLen; //this 2

    static boolean negFlag; //This flag is used in the setInt method.This is static variable.

    function void init() {
        let negFlag = false; //negFlag is Initialised with false value initially
        return;
    }
    
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let maxLen = maxLength;

        //We have to deal with the strings with length 0 also.
        //As Array.new does not take 0 as an argument we will assign 1 to the maxLen if it is 0.
        if( maxLen = 0 ) {
            let maxLen = 1;
        }

        let str = Array.new(maxLen); //this 0 will have the base address of the String
        let length = 0;
        
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do str.dispose(); //This will deAlloc the string array.
        do Memory.deAlloc(this); //This will dealloc the current object which have three fields. (str, length and maxLen)
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return str[j]; //here str refers to (this 0) that means str[j] = ((this + 0) + j)
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if( length < maxLen ) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if( length > 0 ) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean neg;
        var int i;
        var int result;

        let neg = false;
        let i = 0;
        let result = 0;
        
        //if first character of the string is '-' then assign true to the neg variable.As it is negative number.
        if (charAt(i) = 45) {
            let neg = true;
            let i = 1;
        }

        //Process the given input until, we encounter a non numeric character.
        while ((i < length) & isDigit(charAt(i))) {
            //Here 48 is character "0" value
            let result = (result * 10) + (charAt(i) - 48);
            let i = i + 1;
        } 

        if (neg) {return -result;}

        return result;
    }
    
    //If given character is non numeric then it returns false, else true.
    method boolean isDigit(char c) {
        return ((c > 47) & (c < 58));
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, q;
        var char c;

        //If the given value is less than 0, then assign true to negFlag.
        //And make val value positive
        if (val < 0) {
            let negFlag = true;
            let val = -val;
        }

        let q = val / 10;
        let lastDigit = val - (q * 10);

        //Here 48 is character "0" value
        let c = (lastDigit + 48);

        if (val < 10) {
            let length = 0; //Clears the string
            if (negFlag) {
                //AppendChar method is called on the current object.
                do appendChar(45); //If the given number is negative then '-' is appended at first position.
            }
            do appendChar(c);

            let negFlag = false; //There is no need of this flag further.So we will assign false to it.
            return;
        } else {
            //setInt method is called on the current object
            do setInt(q);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
