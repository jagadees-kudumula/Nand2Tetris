// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl

/**
 * ALU (Arithmetic Logic Unit):
 * Performs arithmetic and logic operations based on control bits.
 * Outputs result (out[16]) and status flags: zr (zero) and ng (negative).
 */

CHIP ALU {
    IN  
        x[16], y[16],      // 16-bit inputs
        zx,                // zero the x input?
        nx,                // negate the x input?
        zy,                // zero the y input?
        ny,                // negate the y input?
        f,                 // function code: 1 = add, 0 = and
        no;                // negate the output?
    OUT 
        out[16],           // 16-bit result
        zr,                // 1 if out == 0
        ng;                // 1 if out < 0

    PARTS:
    
    // Step 1: Preprocess x and y based on zx, nx, zy, ny
    // If zx = 1, x becomes 0; else remains the same
    Mux16(a=x, b=false, sel=zx, out=x1);
    
    // If zy = 1, y becomes 0; else remains the same
    Mux16(a=y, b=false, sel=zy, out=y1);

    // If nx = 1, negate x1; else keep x1
    Not16(in=x1, out=notx);
    Mux16(a=x1, b=notx, sel=nx, out=x2);

    // If ny = 1, negate y1; else keep y1
    Not16(in=y1, out=noty);
    Mux16(a=y1, b=noty, sel=ny, out=y2);

    // Step 2: Compute f: If f = 1, out = x2 + y2; else out = x2 & y2
    Add16(a=x2, b=y2, out=c);        // x2 + y2
    And16(a=x2, b=y2, out=d);        // x2 & y2
    Mux16(a=d, b=c, sel=f, out=e);   // choose add or and result

    // Step 3: Negate output if no = 1
    Not16(in=e, out=g);
    Mux16(a=e, b=g, sel=no, out=out, out[15]=firstOut, out[0..7]=finalRight, out[8..15]=finalLeft);

    // Step 4: Compute zr (zero flag)
    // zr = 1 if all bits in out are 0
    Or8Way(in=finalLeft, out=l);     // check left half of output
    Or8Way(in=finalRight, out=m);    // check right half of output
    Or(a=l, b=m, out=nzr);           // zr = !(l | m)
    Not(in=nzr, out=zr);             // invert to set zr = 1 if zero

    // Step 5: Compute ng (negative flag)
    // ng = 1 if MSB (sign bit) is 1
    And(a=firstOut, b=true, out=ng); // firstOut = out[15] (sign bit)
}